{"version":3,"sources":["serviceWorker.js","Page404.js","Github-profile.js","index.js"],"names":["Boolean","window","location","hostname","match","Page404","Card","className","src","this","props","avatar_url","alt","name","company","public_repos","React","Component","CardList","profiles","map","profile","key","id","Form","state","Username","GetValue","event","a","console","log","preventDefault","axios","get","resp","status","onSubmit","data","setState","type","placeholder","value","onChange","target","required","Github","addNewProfile","profileData","prevState","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kNAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,iFCZaC,G,MAJC,kBAAM,8CCIpBC,E,uKAEE,OACI,yBAAKC,UAAY,kBACb,yBAAKC,IAAOC,KAAKC,MAAMC,WAAYC,IAAM,eACzC,yBAAKL,UAAY,QACb,yBAAKA,UAAY,QAAjB,SAA+BE,KAAKC,MAAMG,MAC1C,yBAAKN,UAAY,WAAjB,YAAqCE,KAAKC,MAAMI,SAChD,yBAAKP,UAAY,SAAjB,iBAAwCE,KAAKC,MAAMK,oB,GARpDC,IAAMC,WAcnBC,EAAW,SAACR,GAAD,OACb,6BACKA,EAAMS,SAASC,KAAI,SAAAC,GAAO,OAAI,kBAAC,EAAD,eAAMC,IAAOD,EAAQE,IAAQF,SAK9DG,E,4MACFC,MAAQ,CACJC,SAAU,I,EAEdC,S,uCAAW,WAAOC,GAAP,eAAAC,EAAA,6DAEPC,QAAQC,IAAIH,GACZA,EAAMI,iBAHC,SAIYC,IAAMC,IAAN,uCAA0C,EAAKT,MAAMC,WAJjE,UAIDS,EAJC,OAKPL,QAAQC,IAAII,GACO,MAAhBA,EAAKC,OAND,iBAOH,EAAK1B,MAAM2B,SAASF,EAAKG,MAPtB,2BASiB,MAAhBH,EAAKC,OATN,0CAWI,kBAAC,EAAD,OAXJ,QAaP,EAAKG,SAAS,CAACb,SAAU,KAblB,4C,6GAeF,IAAD,OACJ,OACI,0BAAMW,SAAW5B,KAAKkB,UAClB,2BAAOa,KAAK,OACZC,YAAc,kBACdC,MAASjC,KAAKgB,MAAMC,SACpBiB,SAAY,SAAAf,GAAK,OAAI,EAAKW,SAAS,CAACb,SAAUE,EAAMgB,OAAOF,SAC3DG,UAAQ,IACR,iD,GA3BG7B,IAAMC,WAoDV6B,E,4MAnBXrB,MAAQ,CACJN,SAAU,I,EAEd4B,cAAgB,SAACC,GACb,EAAKT,UAAS,SAAAU,GAAS,MAAK,CACxB9B,SAAS,GAAD,mBAAM8B,EAAU9B,UAAhB,CAAyB6B,QAErClB,QAAQC,IAAI,EAAKZ,W,uDAGjB,OACI,6BACI,yBAAKZ,UAAU,UAAf,uBACA,kBAAC,EAAD,CAAO8B,SAAY5B,KAAKsC,gBACxB,kBAAC,EAAD,CAAU5B,SAAYV,KAAKgB,MAAMN,gB,GAf5BH,IAAMC,WCvD3BiC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SH2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.267df641.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\r\n\r\n    const Page404 = () => <h1>Four:oh:four</h1>\r\n\r\n\r\n\r\n    export default Page404\r\n    ","import React from 'react'\r\nimport axios from 'axios'\r\nimport './Github-profile.css'\r\nimport Page404 from './Page404'\r\n\r\n\r\nclass Card extends React.Component {\r\n    render(){\r\n        return(\r\n            <div className = 'Github-profile'>\r\n                <img src = {this.props.avatar_url} alt = \"size_is_75\" ></img>\r\n                <div className = \"info\">\r\n                    <div className = 'name'>Name: {this.props.name}</div>\r\n                    <div className = 'company'>Company: {this.props.company}</div>\r\n                    <div className = 'repos'>No .of repos: {this.props.public_repos}</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst CardList = (props) => (\r\n    <div>\r\n        {props.profiles.map(profile => <Card key = {profile.id} {...profile} />)}\r\n    </div>\r\n);\r\n\r\n\r\nclass Form extends React.Component {\r\n    state = {\r\n        Username: ''\r\n    };\r\n    GetValue = async (event) => {\r\n        //this.setState({Username: event.target.value })\r\n        console.log(event)\r\n        event.preventDefault();\r\n        const resp = await axios.get(`https://api.github.com/users/${this.state.Username}`)\r\n        console.log(resp)\r\n        if(resp.status === 200){\r\n            this.props.onSubmit(resp.data)\r\n        }\r\n        else if(resp.status === 404 )\r\n        {\r\n            return <Page404 />\r\n        }    \r\n        this.setState({Username: '' })\r\n    }\r\n    render(){\r\n        return(\r\n            <form onSubmit ={this.GetValue} >\r\n                <input type=\"text\" \r\n                placeholder = \"Github Username\" \r\n                value = {this.state.Username} \r\n                onChange = {event => this.setState({Username: event.target.value })}\r\n                required />\r\n                <button>Add Card</button>\r\n            </form>\r\n        )}\r\n}\r\n\r\nclass Github extends React.Component{\r\n    state = {\r\n        profiles: []\r\n    }\r\n    addNewProfile = (profileData) => {\r\n        this.setState(prevState => ({\r\n            profiles: [...prevState.profiles,profileData]\r\n        }))\r\n        console.log(this.profiles)\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <div className=\"header\">GitHub Profile Card</div>\r\n                <Form  onSubmit = {this.addNewProfile} />\r\n                <CardList profiles = {this.state.profiles}  />\r\n            </div>    \r\n        )}\r\n}\r\n\r\nexport default Github","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport Github from './Github-profile'\nReactDOM.render(\n  <React.StrictMode>\n    <Github />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}